---
# YouTube Live Chat Collector - Fixed Secure Frontend Deployment

- name: Deploy React.js Frontend to S3 (Fixed)
  hosts: localhost
  connection: local
  gather_facts: yes
  
  vars:
    project_root: "{{ playbook_dir }}/../.."
    frontend_path: "{{ project_root }}/src/frontend/youtube-chat-viewer"
    terraform_path: "{{ project_root }}/terraform/environments/dev"
  
  tasks:
    - name: Display deployment start
      debug:
        msg: "üöÄ Secure React.js Frontend Deployment Starting..."

    - name: Check frontend directory
      stat:
        path: "{{ frontend_path }}"
      register: frontend_dir
      
    - name: Fail if frontend not found
      fail:
        msg: "Frontend directory not found: {{ frontend_path }}"
      when: not frontend_dir.stat.exists

    - name: Display paths for debugging
      debug:
        msg: |
          üìÅ Paths:
          Project Root: {{ project_root }}
          Frontend Path: {{ frontend_path }}
          Terraform Path: {{ terraform_path }}

    - name: Get Terraform outputs (secure)
      shell: terraform output -json
      args:
        chdir: "{{ terraform_path }}"
      register: tf_outputs
      changed_when: false
      no_log: true

    - name: Parse outputs (secure)
      set_fact:
        bucket_name: "{{ (tf_outputs.stdout | from_json).frontend_bucket_name.value }}"
        website_url: "{{ (tf_outputs.stdout | from_json).frontend_url.value }}"
        api_url: "{{ (tf_outputs.stdout | from_json).api_gateway_url.value }}"
        api_key_val: "{{ (tf_outputs.stdout | from_json).api_key.value }}"
      no_log: true

    - name: Display deployment info (safe)
      debug:
        msg: |
          üì¶ Deployment Information:
          S3 Bucket: {{ bucket_name }}
          Website URL: {{ website_url }}
          API URL: {{ api_url }}
          API Key: [PROTECTED - Retrieved from Terraform]

    - name: Create .env file (secure)
      blockinfile:
        path: "{{ frontend_path }}/.env"
        create: yes
        mode: '0600'
        block: |
          # YouTube Live Chat Collector - Environment Variables
          # Generated by Ansible at {{ ansible_date_time.iso8601 }}
          
          REACT_APP_API_BASE_URL={{ api_url }}
          REACT_APP_API_KEY={{ api_key_val }}
          REACT_APP_APP_NAME=YouTube Live Chat Collector
          REACT_APP_VERSION=1.0.0
          REACT_APP_ENVIRONMENT=dev
          REACT_APP_DEBUG=true
          GENERATE_SOURCEMAP=false
          
          # Build Configuration
          REACT_APP_BUILD_TIME={{ ansible_date_time.iso8601 }}
          REACT_APP_ANSIBLE_MANAGED=true
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
      no_log: true

    - name: Verify .env file created
      stat:
        path: "{{ frontend_path }}/.env"
      register: env_file

    - name: Display .env file status
      debug:
        msg: "‚úÖ .env file created: {{ env_file.stat.exists }}"

    - name: Build React.js application
      shell: npm run build
      args:
        chdir: "{{ frontend_path }}"
      environment:
        NODE_EXTRA_CA_CERTS: /etc/ssl/certs/ca-certificates.crt
        CI: "true"
      register: build_result

    - name: Display build result
      debug:
        msg: |
          üì¶ Build Result:
          Return Code: {{ build_result.rc }}
          Output: {{ build_result.stdout_lines[-3:] | default(['No output']) | join('\n') }}

    - name: Check build directory
      stat:
        path: "{{ frontend_path }}/build"
      register: build_dir

    - name: Fail if build failed
      fail:
        msg: "Build directory not found - npm run build failed"
      when: not build_dir.stat.exists

    - name: Verify S3 bucket access
      shell: aws s3 ls s3://{{ bucket_name }}/
      register: s3_check
      failed_when: false

    - name: Display S3 access check
      debug:
        msg: "S3 Access: {{ 'SUCCESS' if s3_check.rc == 0 else 'FAILED' }}"

    - name: Deploy to S3
      shell: aws s3 sync build/ s3://{{ bucket_name }}/ --delete
      args:
        chdir: "{{ frontend_path }}"
      when: s3_check.rc == 0
      register: s3_deploy

    - name: Display S3 deployment result
      debug:
        msg: |
          üì§ S3 Deployment:
          {{ s3_deploy.stdout_lines | default(['No deployment - S3 access failed']) | join('\n') }}

    - name: Create deployment info
      copy:
        content: |
          {
            "deployment_time": "{{ ansible_date_time.iso8601 }}",
            "environment": "dev",
            "ansible_managed": true,
            "react_build_deployed": true,
            "website_url": "{{ website_url }}",
            "deployment_method": "ansible_secure_fixed",
            "api_key_source": "terraform_output_dynamic"
          }
        dest: /tmp/deployment-info.json

    - name: Upload deployment info
      shell: aws s3 cp /tmp/deployment-info.json s3://{{ bucket_name }}/deployment-info.json
      when: s3_check.rc == 0

    - name: Clean up temporary files
      file:
        path: /tmp/deployment-info.json
        state: absent

    - name: Test website availability
      uri:
        url: "{{ website_url }}"
        method: GET
        status_code: 200
      register: website_test
      retries: 3
      delay: 5
      ignore_errors: yes

    - name: Display final result
      debug:
        msg: |
          üéâ Secure Deployment Complete!
          
          ‚úÖ Status: {{ 'SUCCESS' if website_test.status == 200 else 'PARTIAL (website pending)' }}
          üåê Website URL: {{ website_url }}
          üì¶ S3 Bucket: {{ bucket_name }}
          üîí Security: API Key retrieved dynamically from Terraform
          üß™ Website Test: {{ 'PASSED' if website_test.status == 200 else 'PENDING' }}
          
          üîó Next Steps:
          1. Open {{ website_url }} in browser
          2. Check React.js default page loads
          3. Open browser developer console
          4. Test API connectivity:
             fetch('{{ api_url }}/channels', {
               headers: { 'x-api-key': process.env.REACT_APP_API_KEY }
             })
          
          üõ°Ô∏è Security Implementation:
          ‚úÖ API Key retrieved from Terraform state
          ‚úÖ .env file permissions: 0600 (owner only)
          ‚úÖ Sensitive data excluded from logs (no_log: true)
          ‚úÖ Dynamic configuration management
