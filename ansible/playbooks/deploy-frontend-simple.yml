---
# YouTube Live Chat Collector - Simple Frontend Deployment
# 
# „Ç∑„É≥„Éó„É´„Å™React.js„Éá„Éó„É≠„Ç§„Éó„É¨„Ç§„Éñ„ÉÉ„ÇØ

- name: Deploy React.js Frontend to S3
  hosts: localhost
  connection: local
  gather_facts: no
  
  tasks:
    - name: Display deployment start
      debug:
        msg: "üöÄ React.js Frontend Deployment Starting..."

    - name: Check frontend directory
      stat:
        path: "{{ playbook_dir }}/../../src/frontend/youtube-chat-viewer"
      register: frontend_dir
      
    - name: Fail if frontend not found
      fail:
        msg: "Frontend directory not found"
      when: not frontend_dir.stat.exists

    - name: Get Terraform outputs
      shell: terraform output -json
      args:
        chdir: "{{ playbook_dir }}/../../terraform/environments/dev"
      register: tf_outputs
      changed_when: false

    - name: Parse outputs
      set_fact:
        bucket_name: "{{ (tf_outputs.stdout | from_json).frontend_bucket_name.value }}"
        website_url: "{{ (tf_outputs.stdout | from_json).frontend_url.value }}"
        api_url: "{{ (tf_outputs.stdout | from_json).api_gateway_url.value }}"
        api_key_val: "{{ (tf_outputs.stdout | from_json).api_key.value }}"

    - name: Display deployment info
      debug:
        msg: |
          üì¶ Deployment Information:
          S3 Bucket: {{ bucket_name }}
          Website URL: {{ website_url }}
          API URL: {{ api_url }}

    - name: Create .env file
      copy:
        content: |
          REACT_APP_API_BASE_URL={{ api_url }}
          REACT_APP_API_KEY={{ api_key_val }}
          REACT_APP_APP_NAME=YouTube Live Chat Collector
          REACT_APP_VERSION=1.0.0
          REACT_APP_ENVIRONMENT=dev
          REACT_APP_DEBUG=true
          GENERATE_SOURCEMAP=false
        dest: "{{ playbook_dir }}/../../src/frontend/youtube-chat-viewer/.env"
        mode: '0644'

    - name: Build React.js application
      shell: npm run build
      args:
        chdir: "{{ playbook_dir }}/../../src/frontend/youtube-chat-viewer"
      environment:
        NODE_EXTRA_CA_CERTS: /etc/ssl/certs/ca-certificates.crt
        CI: "true"

    - name: Check build directory
      stat:
        path: "{{ playbook_dir }}/../../src/frontend/youtube-chat-viewer/build"
      register: build_dir

    - name: Fail if build failed
      fail:
        msg: "Build directory not found - npm run build failed"
      when: not build_dir.stat.exists

    - name: Verify S3 bucket access
      shell: aws s3 ls s3://{{ bucket_name }}/
      register: s3_check
      failed_when: false

    - name: Deploy to S3
      shell: aws s3 sync build/ s3://{{ bucket_name }}/ --delete
      args:
        chdir: "{{ playbook_dir }}/../../src/frontend/youtube-chat-viewer"
      when: s3_check.rc == 0

    - name: Create deployment info
      copy:
        content: |
          {
            "deployment_time": "{{ ansible_date_time.iso8601 }}",
            "environment": "dev",
            "ansible_managed": true,
            "react_build_deployed": true,
            "website_url": "{{ website_url }}"
          }
        dest: /tmp/deployment-info.json

    - name: Upload deployment info
      shell: aws s3 cp /tmp/deployment-info.json s3://{{ bucket_name }}/deployment-info.json

    - name: Test website
      uri:
        url: "{{ website_url }}"
        method: GET
        status_code: 200
      register: website_test
      retries: 3
      delay: 5
      ignore_errors: yes

    - name: Display final result
      debug:
        msg: |
          üéâ Deployment Complete!
          
          Website URL: {{ website_url }}
          S3 Bucket: {{ bucket_name }}
          Website Test: {{ 'SUCCESS' if website_test.status == 200 else 'PENDING' }}
          
          Next Steps:
          1. Open {{ website_url }} in browser
          2. Check browser console for API connectivity
          3. Test API calls in developer tools
