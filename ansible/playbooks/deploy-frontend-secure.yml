---
# YouTube Live Chat Collector - Secure Frontend Deployment
# 
# セキュアなReact.jsデプロイプレイブック
# APIキーはTerraform outputから安全に取得

- name: Deploy React.js Frontend to S3 (Secure)
  hosts: localhost
  connection: local
  gather_facts: no
  
  tasks:
    - name: Display deployment start
      debug:
        msg: "🚀 Secure React.js Frontend Deployment Starting..."

    - name: Check frontend directory
      stat:
        path: "{{ playbook_dir }}/../../src/frontend/youtube-chat-viewer"
      register: frontend_dir
      
    - name: Fail if frontend not found
      fail:
        msg: "Frontend directory not found"
      when: not frontend_dir.stat.exists

    - name: Get Terraform outputs (secure)
      shell: terraform output -json
      args:
        chdir: "{{ playbook_dir }}/../../terraform/environments/dev"
      register: tf_outputs
      changed_when: false
      no_log: true  # ログに出力しない（APIキー保護）

    - name: Parse outputs (secure)
      set_fact:
        bucket_name: "{{ (tf_outputs.stdout | from_json).frontend_bucket_name.value }}"
        website_url: "{{ (tf_outputs.stdout | from_json).frontend_url.value }}"
        api_url: "{{ (tf_outputs.stdout | from_json).api_gateway_url.value }}"
        api_key_val: "{{ (tf_outputs.stdout | from_json).api_key.value }}"
      no_log: true  # ログに出力しない（APIキー保護）

    - name: Display deployment info (safe)
      debug:
        msg: |
          📦 Deployment Information:
          S3 Bucket: {{ bucket_name }}
          Website URL: {{ website_url }}
          API URL: {{ api_url }}
          API Key: [PROTECTED - Retrieved from Terraform]

    - name: Create .env file (secure)
      copy:
        content: |
          # YouTube Live Chat Collector - Environment Variables
          # Generated by Ansible at {{ ansible_date_time.iso8601 }}
          
          REACT_APP_API_BASE_URL={{ api_url }}
          REACT_APP_API_KEY={{ api_key_val }}
          REACT_APP_APP_NAME=YouTube Live Chat Collector
          REACT_APP_VERSION=1.0.0
          REACT_APP_ENVIRONMENT=dev
          REACT_APP_DEBUG=true
          GENERATE_SOURCEMAP=false
          
          # Build Configuration
          REACT_APP_BUILD_TIME={{ ansible_date_time.iso8601 }}
          REACT_APP_ANSIBLE_MANAGED=true
        dest: "{{ playbook_dir }}/../../src/frontend/youtube-chat-viewer/.env"
        mode: '0600'  # 所有者のみ読み書き可能
      no_log: true  # ログに出力しない（APIキー保護）

    - name: Build React.js application
      shell: npm run build
      args:
        chdir: "{{ playbook_dir }}/../../src/frontend/youtube-chat-viewer"
      environment:
        NODE_EXTRA_CA_CERTS: /etc/ssl/certs/ca-certificates.crt
        CI: "true"

    - name: Check build directory
      stat:
        path: "{{ playbook_dir }}/../../src/frontend/youtube-chat-viewer/build"
      register: build_dir

    - name: Fail if build failed
      fail:
        msg: "Build directory not found - npm run build failed"
      when: not build_dir.stat.exists

    - name: Display build success
      debug:
        msg: "✅ React.js build completed successfully"

    - name: Verify S3 bucket access
      shell: aws s3 ls s3://{{ bucket_name }}/
      register: s3_check
      failed_when: false

    - name: Deploy to S3
      shell: aws s3 sync build/ s3://{{ bucket_name }}/ --delete
      args:
        chdir: "{{ playbook_dir }}/../../src/frontend/youtube-chat-viewer"
      when: s3_check.rc == 0
      register: s3_deploy

    - name: Display S3 deployment result
      debug:
        msg: |
          📤 S3 Deployment Result:
          {{ s3_deploy.stdout_lines | default(['No output']) | join('\n') }}

    - name: Create deployment info
      copy:
        content: |
          {
            "deployment_time": "{{ ansible_date_time.iso8601 }}",
            "environment": "dev",
            "ansible_managed": true,
            "react_build_deployed": true,
            "website_url": "{{ website_url }}",
            "deployment_method": "ansible_secure",
            "api_key_source": "terraform_output"
          }
        dest: /tmp/deployment-info.json

    - name: Upload deployment info
      shell: aws s3 cp /tmp/deployment-info.json s3://{{ bucket_name }}/deployment-info.json
      register: deploy_info_upload

    - name: Clean up temporary files
      file:
        path: /tmp/deployment-info.json
        state: absent

    - name: Test website availability
      uri:
        url: "{{ website_url }}"
        method: GET
        status_code: 200
      register: website_test
      retries: 3
      delay: 5
      ignore_errors: yes

    - name: Display final result
      debug:
        msg: |
          🎉 Secure Deployment Complete!
          
          ✅ Status: SUCCESS
          🌐 Website URL: {{ website_url }}
          📦 S3 Bucket: {{ bucket_name }}
          🔒 Security: API Key retrieved securely from Terraform
          🧪 Website Test: {{ 'PASSED' if website_test.status == 200 else 'PENDING (may take a few minutes)' }}
          
          🔗 Next Steps:
          1. Open {{ website_url }} in browser
          2. Check browser console for API connectivity
          3. Test API calls: 
             fetch('{{ api_url }}/channels', {
               headers: { 'x-api-key': '[FROM_ENV]' }
             })
          
          🛡️ Security Notes:
          - API Key retrieved from Terraform state (secure)
          - .env file permissions: 0600 (owner only)
          - No sensitive data in Ansible logs
